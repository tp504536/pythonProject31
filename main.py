import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

from db import Database
from keyboards import *


API_TOKEN = '5971412217:AAG1tpPOeGsWvBdtKlDtst9tTevjJ3or2gg'

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot,storage=storage)
db = Database('database.db')


class FSMfilm(StatesGroup):
    film = State()


class FSMfilm_name(StatesGroup):
    film_name = State()


class FSMsearche(StatesGroup):
    searche_number = State()


class FSMspam(StatesGroup):
    spam = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, ' + message.from_user.full_name +
                         '!\n–î–ª—è –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª¬ª üëá', reply_markup=search)


@dp.message_handler(commands=['admin'])
async def send_welcome(message: types.Message):
    if message.from_user.id == 1912165183:
     await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=admin)


@dp.message_handler(content_types=['text'])
async def send_button(message: types.Message):
    if message.text == '–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª üîé':
        await FSMsearche.searche_number.set()
        await message.answer('–ù–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞')
    elif message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–ºüìΩ':
        await message.answer('ffff')
    if message.from_user.id == 1912165183:
        if message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
            await message.answer('–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        elif message.text == '–°—Ç–∞—Ç–∏—Ç—Å–∏–∫–∞':
            await message.answer('hhh')
    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—Ä—É', reply_markup=search)

@dp.message_handler(content_types='text', state=FSMsearche.searche_number)
async def searche(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        await state.finish()
        if str(data['text']).isnumeric():
            try:
                searg = db.searche_film(data['text'])
                await message.answer('–§–∏–ª—å–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è: ' + str(searg), reply_markup=search)
            except IndexError:
                await message.answer('–¢–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ', reply_markup=search)
        else:
            await message.answer('üö´ –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥  –∫–æ–¥–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–æ–ª—å—à–µ –Ω—É–ª—è!', reply_markup=search)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
